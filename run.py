import pandas as pd
import pymysql
import warnings
from tqdm import tqdm

# Suppress specific UserWarning
warnings.filterwarnings("ignore", category=UserWarning, message="pandas only supports SQLAlchemy connectable")

# Load the CSV file
csv_file_path = 'bigspeak.csv'
csv_data = pd.read_csv(csv_file_path)

# MySQL database connection details
user = 'root'
password = ''
host = 'localhost'
port = 3306  # Default is 3306
database = 'leads'

# Function to fetch data from the database
def fetch_data_from_db(speaker_first_name, speaker_last_name, table_name, connection):
    query = f"""
    SELECT * FROM {table_name}
    WHERE PROFILE_FIRST_NAME LIKE '%{speaker_first_name}%'
    AND PROFILE_LAST_NAME LIKE '%{speaker_last_name}%'
    """
    return pd.read_sql(query, connection)

# Function to fetch data from the 2021 table
def fetch_data_from_db_2021(speaker_name, table_name, connection):
    query = f"""
    SELECT * FROM {table_name}
    WHERE first_name LIKE '%{speaker_name}%'
    OR last_name LIKE '%{speaker_name}%'
    """
    return pd.read_sql(query, connection)

# Function to split the speaker name into first and last names
def split_name(full_name):
    parts = full_name.split()
    if len(parts) > 1:
        return parts[0], parts[-1]
    else:
        return parts[0], ""

# Open a new CSV file to write the output
output_file_path = 'output2.csv'
with open(output_file_path, 'w', encoding='utf-8') as output_file:
    # Write the header for the output file
    output_file.write('Original CSV Line,Matching Entries\n')

    # Establish a connection to the MySQL database
    connection = pymysql.connect(user=user, password=password, host=host, port=port, database=database)

    try:
        # Iterate over each row in the CSV file with a progress bar
        for index, row in tqdm(csv_data.iterrows(), total=len(csv_data), desc="Processing"):
            speaker_name = row['title']
            speaker_first_name, speaker_last_name = split_name(speaker_name)
            
            # Fetch matching entries from both tables
            matching_entries_2023 = fetch_data_from_db(speaker_first_name, speaker_last_name, 'linkedin2023', connection)
            matching_entries_2021 = fetch_data_from_db_2021(speaker_name, 'linkedin2021', connection)
            
            # Write the original CSV line to the output file
            output_file.write(','.join(map(str, row.values)) + '\n')
            
            # Write the matching entries from the 2023 table to the output file
            if not matching_entries_2023.empty:
                output_file.write('from db `leads` and table linkedin 2023:\n')
                matching_entries_2023.to_csv(output_file, header=False, index=False)
            
            # Write the matching entries from the 2021 table to the output file
            if not matching_entries_2021.empty:
                output_file.write('from db `leads` and table linkedin 2021:\n')
                matching_entries_2021.to_csv(output_file, header=False, index=False)
    finally:
        # Close the database connection
        connection.close()

print(f"Output has been written to {output_file_path}")
